import requests
from datetime import datetime
import os
import json
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut

class LlamaHandler:
    def __init__(self):
        self.current_places = []
        self.current_location = None
        self.geolocator = Nominatim(user_agent="my_travel_app")
        
        # Patrones de lenguaje natural
        self.location_patterns = {
            'preguntas_generales': [
                'que hay en', 'que puedo ver en', 'que visitar en', 'lugares para ver en',
                'que hacer en', 'que me recomiendas en', 'lugares de inter√©s en',
                'sitios para visitar en', 'atracciones en', 'puntos de inter√©s en'
            ],
            'restaurantes': [
                'donde comer en', 'restaurantes en', 'lugares para comer en',
                'sitios para cenar en', 'cafeter√≠as en', 'bares en',
                'donde cenar en', 'comida en', 'gastronom√≠a de'
            ],
            'cultura': [
                'museos en', 'lugares hist√≥ricos en', 'sitios culturales en',
                'monumentos en', 'arte en', 'historia de', 'teatros en',
                'arquitectura de', 'patrimonio de'
            ],
            'naturaleza': [
                'parques en', 'jardines en', 'espacios verdes en',
                'naturaleza en', 'aire libre en', 'zonas verdes de'
            ]
        }

    def query_places(self, query_text):
        """Procesa consultas en lenguaje natural"""
        try:
            query_text = query_text.lower().strip()
            print(f"Procesando consulta: '{query_text}'")
            
            # Si es solo un saludo sin pregunta adicional
            if self._is_only_greeting(query_text):
                print("Detectado saludo simple")
                return self._get_greeting_response()
            
            # Si es una pregunta sobre el bot sin consulta de lugar
            if self._is_only_bot_question(query_text):
                print("Detectada pregunta sobre el bot")
                return self._get_bot_info_response()
            
            # Extraer ubicaci√≥n y tipo de consulta
            location, query_type = self._parse_natural_query(query_text)
            print(f"Ubicaci√≥n extra√≠da: '{location}'")
            print(f"Tipo de consulta: '{query_type}'")
            
            if not location:
                return ("No he podido identificar el lugar del que me hablas. "
                       "¬øPodr√≠as decirme espec√≠ficamente qu√© ciudad o lugar te interesa?")
            
            # Obtener coordenadas
            try:
                geo_location = self.geolocator.geocode(location, timeout=10)
                if not geo_location:
                    return f"No pude encontrar la ubicaci√≥n de '{location}'. ¬øPodr√≠as ser m√°s espec√≠fico?"
                
                print(f"Coordenadas encontradas: {geo_location.latitude}, {geo_location.longitude}")
                
                # Actualizar ubicaci√≥n y buscar lugares
                self.set_current_location(geo_location.latitude, geo_location.longitude)
                
                if not self.current_places:
                    return f"No encontr√© lugares de inter√©s en {location}. ¬øQuiz√°s podr√≠as probar con una zona m√°s c√©ntrica o tur√≠stica?"
                
                # Generar respuesta seg√∫n el tipo de consulta
                response = None
                if query_type == 'restaurantes':
                    response = self._get_restaurants_info(self.current_places)
                elif query_type == 'cultura':
                    response = self._get_cultural_places(self.current_places)
                elif query_type == 'naturaleza':
                    response = self._get_parks_info(self.current_places)
                else:
                    response = self._get_general_places_info(self.current_places)
                
                if not response or response.strip() == "":
                    return f"Encontr√© {len(self.current_places)} lugares en {location}, pero no del tipo espec√≠fico que buscas. ¬øTe gustar√≠a ver otros tipos de lugares?"
                
                return response
                
            except Exception as e:
                print(f"Error al procesar ubicaci√≥n: {str(e)}")
                return "Lo siento, tuve un problema buscando ese lugar. ¬øPodr√≠as intentarlo de nuevo?"
                
        except Exception as e:
            print(f"Error general en query_places: {str(e)}")
            return "Hubo un error procesando tu consulta. ¬øPodr√≠as reformularla?"

    def _is_only_greeting(self, text):
        """Detecta si el mensaje es √∫nicamente un saludo sin consulta adicional"""
        greetings = ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 
                    'hey', 'saludos', 'que tal', 'como est√°s']
        
        # Si el texto es solo un saludo (considerando algunas palabras adicionales comunes)
        words = text.split()
        if len(words) <= 3:  # Solo saludo o saludo con cortes√≠a
            return any(greeting in text for greeting in greetings)
        return False

    def _is_only_bot_question(self, text):
        """Detecta si es √∫nicamente una pregunta sobre el bot sin consulta adicional"""
        bot_questions = ['quien eres', 'que eres', 'como funcionas', 'que haces',
                        'como puedes ayudar', 'que me puedes decir']
        
        # Verificar si es solo una pregunta sobre el bot
        return any(question in text and len(text.split()) <= len(question.split()) + 2 
                  for question in bot_questions)

    def _parse_natural_query(self, query):
        """Analiza la consulta en lenguaje natural de manera m√°s robusta"""
        print(f"Analizando consulta: '{query}'")
        
        # Primero buscar patrones conocidos
        for category, patterns in self.location_patterns.items():
            for pattern in patterns:
                if pattern in query:
                    # Extraer la ubicaci√≥n que viene despu√©s del patr√≥n
                    location = query.split(pattern)[-1].strip()
                    print(f"Patr√≥n encontrado: '{pattern}' -> Ubicaci√≥n: '{location}'")
                    return location, category
        
        # Si no encuentra patrones, buscar preposiciones comunes
        prepositions = ['en', 'de', 'sobre', 'cerca de', 'alrededor de']
        words = query.split()
        for i, word in enumerate(words):
            if word in prepositions and i + 1 < len(words):
                location = ' '.join(words[i+1:])
                print(f"Ubicaci√≥n encontrada despu√©s de '{word}': '{location}'")
                return location, 'general'
        
        # Si a√∫n no encuentra, buscar nombres propios o palabras capitalizadas en la consulta original
        original_words = query.split()
        for i, word in enumerate(original_words):
            if word[0].isupper():
                location = ' '.join(original_words[i:])
                print(f"Ubicaci√≥n encontrada por may√∫scula: '{location}'")
                return location, 'general'
        
        print("No se encontr√≥ ubicaci√≥n")
        return None, 'general'

    def _format_place_info(self, place):
        """Formatea la informaci√≥n de un lugar de manera amigable"""
        info = [f"üìç {place['name']}"]
        
        if place.get('type'):
            info.append(f"   Tipo: {place['type']}")
        
        if place.get('description'):
            info.append(f"   üìù {place['description']}")
        
        if place.get('rating'):
            info.append(f"   ‚≠ê Calificaci√≥n: {place['rating']}")
        
        if place.get('opening_hours'):
            info.append(f"   ‚è∞ Horario: {place['opening_hours']}")
        
        if place.get('website'):
            info.append(f"   üåê Web: {place['website']}")
            
        if place.get('phone'):
            info.append(f"   üìû Tel: {place['phone']}")
            
        if place.get('address'):
            info.append(f"   üìÆ Direcci√≥n: {place['address']}")
            
        return "\n".join(info)

    def _get_nearby_places(self, lat, lon, radius=2000):
        """Obtiene lugares cercanos usando Overpass API"""
        query = f"""
        [out:json][timeout:25];
        (
            node["tourism"](around:{radius},{lat},{lon});
            node["historic"](around:{radius},{lat},{lon});
            node["amenity"~"restaurant|cafe|bar|museum|theatre"](around:{radius},{lat},{lon});
            node["leisure"~"park|garden"](around:{radius},{lat},{lon});
        );
        out body;
        """
        
        try:
            response = requests.get(
                "https://overpass-api.de/api/interpreter",
                params={'data': query},
                timeout=30
            )
            
            if response.status_code == 200:
                results = response.json()
                places = []
                
                for element in results.get('elements', []):
                    if 'tags' in element:
                        place = {
                            "name": element['tags'].get('name', 'Sin nombre'),
                            "type": (
                                element['tags'].get('tourism') or 
                                element['tags'].get('historic') or 
                                element['tags'].get('amenity') or
                                element['tags'].get('leisure')
                            ),
                            "latitude": element.get('lat'),
                            "longitude": element.get('lon'),
                            "rating": element['tags'].get('stars', 'No disponible'),
                            "description": element['tags'].get('description', ''),
                            "address": element['tags'].get('addr:street', ''),
                            "opening_hours": element['tags'].get('opening_hours', ''),
                            "website": element['tags'].get('website', ''),
                            "phone": element['tags'].get('phone', '')
                        }
                        if place['name'] != 'Sin nombre':
                            places.append(place)
                
                return places
            return []
        except Exception as e:
            print(f"Error al obtener lugares cercanos: {str(e)}")
            return []

    def _extract_place_name(self, query):
        """Extrae el nombre del lugar de la consulta"""
        location_indicators = ['en', 'de', 'sobre', 'acerca de', 'para', 'cerca de']
        
        query = query.lower()
        for indicator in location_indicators:
            if indicator in query:
                parts = query.split(indicator)
                if len(parts) > 1:
                    return parts[1].strip()
        
        return query.strip()

    def _generate_response(self, query, places):
        """Genera una respuesta basada en el tipo de consulta"""
        query = query.lower()
        
        if any(word in query for word in ['restaurante', 'comer', 'comida', 'caf√©', 'bar']):
            return self._get_restaurants_info(places)
        elif any(word in query for word in ['museo', 'cultural', 'hist√≥rico', 'historia']):
            return self._get_cultural_places(places)
        elif any(word in query for word in ['parque', 'jard√≠n', 'aire libre', 'naturaleza']):
            return self._get_parks_info(places)
        else:
            return self._get_general_places_info(places)

    def _get_restaurants_info(self, places):
        restaurants = [p for p in places if p['type'] in ['restaurant', 'cafe', 'bar']]
        if not restaurants:
            return "No encontr√© restaurantes en esta ubicaci√≥n."
        
        response = [f"üçΩÔ∏è Restaurantes y caf√©s en {self.current_location}:"]
        
        for rest in restaurants[:5]:
            info = [f"\n\n‚Ä¢ {rest['name']}"]
            if rest['type']:
                info.append(f"Tipo: {rest['type']}")
            if rest.get('rating'):
                info.append(f"‚≠ê {rest['rating']}")
            if rest.get('opening_hours'):
                info.append(f"Horario: {rest['opening_hours']}")
            if rest.get('website'):
                info.append(f"Web: {rest['website']}")
            response.append(" | ".join(info))
        
        return "".join(response)

    def _get_cultural_places(self, places):
        cultural = [p for p in places if p['type'] in ['museum', 'historic', 'theatre']]
        if not cultural:
            return "No encontr√© lugares culturales en esta ubicaci√≥n."
        
        response = [f"üèõÔ∏è Lugares culturales en {self.current_location}:\n"]
        
        for place in cultural[:5]:
            info = [f"‚Ä¢ {place['name']}"]
            if place['type']:
                info.append(f"Tipo: {place['type']}")
            if place.get('rating'):
                info.append(f"‚≠ê {place['rating']}")
            if place.get('description'):
                info.append(f"{place['description']}")
            response.append(" | ".join(info))
        
        return "\n\n".join(response)

    def _get_parks_info(self, places):
        parks = [p for p in places if p['type'] in ['park', 'garden']]
        if not parks:
            return "No encontr√© parques en esta ubicaci√≥n."
        
        response = [f"üå≥ Parques y jardines en {self.current_location}:\n"]
        
        for park in parks[:5]:
            info = [f"‚Ä¢ {park['name']}"]
            if park['type']:
                info.append(f"Tipo: {park['type']}")
            if park.get('rating'):
                info.append(f"‚≠ê {park['rating']}")
            if park.get('description'):
                info.append(f"{park['description']}")
            response.append(" | ".join(info))
        
        return "\n\n".join(response)

    def _get_general_places_info(self, places):
        if not places:
            return "No encontr√© lugares de inter√©s en esta ubicaci√≥n."
        
        response = [f"üìç Lugares de inter√©s en {self.current_location}:\n"]
        
        for place in places[:8]:
            info = [f"‚Ä¢ {place['name']}"]
            if place['type']:
                info.append(f"Tipo: {place['type']}")
            if place.get('rating'):
                info.append(f"‚≠ê {place['rating']}")
            if place.get('description'):
                info.append(f"{place['description']}")
            if place.get('website'):
                info.append(f"Web: {place['website']}")
            response.append(" | ".join(info))
        
        return "\n\n".join(response)

    def get_places_summary(self):
        """Retorna un resumen de los lugares actuales"""
        if not self.current_places:
            return "No hay lugares almacenados para la ubicaci√≥n actual."
        
        try:
            # Contar lugares por tipo
            place_types = {}
            for place in self.current_places:
                place_type = place.get('type', 'Sin clasificar')
                place_types[place_type] = place_types.get(place_type, 0) + 1
            
            # Crear resumen
            summary = [
                f"üìä Resumen de lugares en {self.current_location or 'ubicaci√≥n actual'}:",
                f"\nüìç Total de lugares: {len(self.current_places)}",
                "\nüè∑Ô∏è Lugares por tipo:"
            ]
            
            for place_type, count in sorted(place_types.items()):
                summary.append(f"  ‚Ä¢ {place_type}: {count} lugares")
            
            # Agregar algunos lugares destacados si existen
            if self.current_places:
                summary.append("\n‚ú® Algunos lugares destacados:")
                for place in self.current_places[:3]:
                    summary.append(f"  ‚Ä¢ {place['name']}")
                    if place.get('type'):
                        summary.append(f"    Tipo: {place['type']}")
                    if place.get('opening_hours'):
                        summary.append(f"    Horario: {place['opening_hours']}")
            
            return "\n".join(summary)
        except Exception as e:
            print(f"Error al generar resumen: {str(e)}")
            return "Error al generar el resumen de lugares."

    def set_current_location(self, latitude, longitude, radius=2000):
        """Actualiza los lugares actuales basados en la ubicaci√≥n"""
        try:
            print(f"Actualizando ubicaci√≥n a: {latitude}, {longitude}")
            self.current_location = (latitude, longitude)
            
            # Buscar lugares cercanos usando Overpass API
            places = self._get_nearby_places(latitude, longitude, radius)
            
            if places:
                self.current_places = places
                print(f"Se encontraron {len(places)} lugares en la nueva ubicaci√≥n")
            else:
                self.current_places = []
                print("No se encontraron lugares en la nueva ubicaci√≥n")
            
            return len(self.current_places)
        
        except Exception as e:
            print(f"Error al actualizar ubicaci√≥n: {str(e)}")
            self.current_places = []
            return 0